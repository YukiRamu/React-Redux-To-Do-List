{"version":3,"sources":["redux/ToDoSlice.jsx","components/ToDoInput/ToDoInput.jsx","contexts/MediaQueryContext.jsx","components/ToDoFilter/ToDoFilter.jsx","components/ToDoList/ToDoList.jsx","App.jsx","redux/store.jsx","serviceWorker.js","index.js"],"names":["ToDoSlice","createSlice","name","initialState","reducers","addToDo","state","action","push","payload","deleteToDo","filter","elem","id","statusChange","console","log","map","index","splice","actions","ToDoListSelector","toDo","ToDoInput","dispatchToDoList","useDispatch","useState","item","setItem","error","setError","className","Form","onSubmit","e","preventDefault","setTimeout","isCompleted","isDeleted","isEditing","uuid","Group","Control","type","placeholder","value","onChange","target","Button","variant","MediaQueryContext","createContext","isSmartPhone","isMobile","isTablet","isDesktop","isLargeDesktop","MediaQueryProvider","props","useMediaQuery","maxWidth","minWidth","Provider","children","ToDoFilter","ToDoList","useContext","toDoList","useSelector","editItem","setEditItem","alertModal","setAlertModal","deleteToDoItem","delItem","itemStatusChange","status","targetItem","undefined","Error","length","Row","Col","join","onClick","disabled","as","Modal","show","onHide","Header","Title","App","href","rel","store","configureStore","reducer","ToDoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.820baf6f.chunk.js","sourcesContent":["/* Slice.jsx handles all basic configuration on Redux */\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst ToDoSlice = createSlice({\r\n  name: \"toDo\",\r\n  initialState: [],\r\n  reducers: {\r\n    //define action methods -- needs to return\r\n    addToDo: (state, action) => {\r\n      state.push(action.payload);\r\n      //////////// add to local storage ////////////\r\n    },\r\n    deleteToDo: (state, action) => {\r\n      //delete from state\r\n      return state.filter(elem => elem.id != action.payload.id);\r\n    },\r\n    statusChange: (state, action) => {\r\n      //complete, edit, or save\r\n      console.log(action.payload);\r\n      //update state\r\n      state.map((elem, index) => elem.id == action.payload.id && state.splice(index, 1, action.payload));\r\n    }\r\n  }\r\n});\r\n\r\n//export reducer, actions,and state(selector)\r\nexport default ToDoSlice.reducer;\r\nexport const { addToDo, deleteToDo, statusChange } = ToDoSlice.actions;\r\nexport const ToDoListSelector = state => state.toDo;","import React, { useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addToDo } from '../../redux/ToDoSlice';\r\nimport \"./ToDoInput.css\";\r\nimport uuid from 'react-uuid';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { FiAlertOctagon } from \"react-icons/fi\";\r\n//import ToDoContext from '../../contexts/ToDoContext';\r\n\r\nconst ToDoInput = () => {\r\n\r\n  //Use dispatch method from redux\r\n  const dispatchToDoList = useDispatch();\r\n\r\n  //Private state hook\r\n  const [item, setItem] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const addToDoItem = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (item === \"\") {\r\n      setError(\"Please enter your task\");\r\n      setTimeout(() => { setError(\"\"); }, 2000);\r\n    } else {\r\n      //dispatch\r\n      dispatchToDoList(addToDo({\r\n        item: item,\r\n        isCompleted: false,\r\n        isDeleted: false,\r\n        isEditing: false,\r\n        id: uuid()\r\n      }));\r\n      //clear input\r\n      setItem(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"inputFormContainer\">\r\n        <Form onSubmit={addToDoItem}>\r\n          <Form.Group>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter your task...\"\r\n              value={item}\r\n              onChange={e => setItem(e.target.value)} />\r\n          </Form.Group>\r\n          <Button variant=\"outline-info\" type=\"submit\" className=\"addBtn\">Add</Button>\r\n        </Form>\r\n        {error && <p className=\"errorMsg\"><FiAlertOctagon /> {error}</p>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoInput;\r\n","import React, { createContext } from 'react';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\n//create context with initial values - mobile first\r\nconst MediaQueryContext = createContext({\r\n  isSmartPhone: true,\r\n  isMobile: false,\r\n  isTablet: false,\r\n  isDesktop: false,\r\n  isLargeDesktop: false\r\n});\r\n\r\nconst MediaQueryProvider = (props) => {\r\n  const isSmartPhone = useMediaQuery({ maxWidth: 576 }); //default\r\n  const isMobile = useMediaQuery({ minWidth: 576, maxWidth: 767 }); //incl landscape phone sm\r\n  const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 991 }); //md\r\n  const isDesktop = useMediaQuery({ minWidth: 992, maxWidth: 1200 }); //lg\r\n  const isLargeDesktop = useMediaQuery({ minWidth: 1200 }); //xl\r\n\r\n  return (\r\n    <>\r\n      <MediaQueryContext.Provider value={{ isSmartPhone, isMobile, isTablet, isDesktop, isLargeDesktop }}>\r\n        {props.children}\r\n      </MediaQueryContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { MediaQueryContext as default, MediaQueryProvider };\r\n\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button } from 'react-bootstrap';\r\nimport \"./ToDoFilter.css\";\r\n\r\nconst ToDoFilter = () => {\r\n\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"filter\">\r\n        <Button>In Progress</Button>\r\n        <Button>Done</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoFilter;\r\n","import React, { useContext, useState } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ToDoListSelector, deleteToDo, statusChange } from '../../redux/ToDoSlice';\r\nimport \"./ToDoList.css\";\r\nimport { Form, Row, Button, Col, Modal } from 'react-bootstrap';\r\nimport { AiFillEdit, AiFillDelete, AiFillCheckSquare } from \"react-icons/ai\";\r\nimport MediaQueryContext from '../../contexts/MediaQueryContext';\r\nimport ToDoFilter from '../ToDoFilter/ToDoFilter';\r\n\r\nconst ToDoList = () => {\r\n\r\n  //Responsive design\r\n  const { isSmartPhone, isMobile, isTablet, isDesktop, isLargeDesktop } = useContext(MediaQueryContext);\r\n\r\n  //Get state from slice.jsx\r\n  const toDoList = useSelector(ToDoListSelector);\r\n\r\n  console.log(\"I am here\", toDoList);\r\n\r\n  //Use dispatch method from redux\r\n  const dispatchToDoList = useDispatch();\r\n\r\n  //Private state hook\r\n  const [editItem, setEditItem] = useState(\"\");\r\n  const [alertModal, setAlertModal] = useState(false);\r\n\r\n  //methods\r\n  /* delete */\r\n  const deleteToDoItem = (id) => {\r\n    //find which item is completed  -----> will be refactored. just pass id or index. isDeleted  not needed\r\n    let delItem = toDoList.filter(elem => elem.id === id);\r\n\r\n    //change isDeleted flag and dispatch\r\n    dispatchToDoList(deleteToDo({\r\n      item: delItem[0].item,\r\n      isCompleted: delItem[0].isCompleted,\r\n      isDeleted: true, //change\r\n      isEditing: delItem[0].isEditing,\r\n      id: delItem[0].id,\r\n    }));\r\n  };\r\n\r\n  /* status change - complete, edit, or save*/\r\n  const itemStatusChange = (id, status) => {\r\n\r\n    //find which item is on target\r\n    let targetItem = toDoList.filter(elem => elem.id === id);\r\n\r\n    //prepare payload object\r\n    const payload = {\r\n      item: targetItem[0].item,\r\n      isCompleted: false,\r\n      isDeleted: false,\r\n      isEditing: false,\r\n      id: targetItem[0].id,\r\n    };\r\n\r\n    //prepare action methods\r\n    const completeAction = () => {\r\n      payload.isCompleted = true;\r\n      return payload;\r\n    };\r\n\r\n    const editAction = () => {\r\n      setEditItem(targetItem[0].item); //to show the current task in the input field\r\n      payload.isEditing = true;\r\n      return payload;\r\n    };\r\n\r\n    const saveAction = () => {\r\n      //input validation check\r\n      editItem === \"\" ?\r\n        setAlertModal(true)\r\n        : payload.item = editItem; payload.isEditing = false; return payload;\r\n    };\r\n\r\n    //dispatch payload based on status\r\n    if (status === undefined) throw new Error(\"Invalid status\");\r\n    status === \"complete\" && dispatchToDoList(statusChange(completeAction()));\r\n    status === \"edit\" && dispatchToDoList(statusChange(editAction()));\r\n    status === \"save\" && dispatchToDoList(statusChange(saveAction()));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toDosContainer\">\r\n        {!toDoList.length == 0 ? (\r\n          <>\r\n            {/* Filter */}\r\n            <ToDoFilter />\r\n\r\n            {/* To do list */}\r\n            {/* Smartphone and Landscape view */}\r\n            {(isSmartPhone || isMobile) && <>\r\n              {toDoList.map(elem => (\r\n                <Row\r\n                  key={elem.id}\r\n                  className=\"taskCard\" >\r\n                  <Col\r\n                    data-id={elem.id}\r\n                    className={[\r\n                      \"task\",\r\n                      elem.isCompleted && \"complete\"\r\n                    ].join(' ')}>\r\n\r\n                    {!elem.isEditing ?\r\n                      <p>{elem.item}</p> :\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        className=\"editBox\"\r\n                        value={editItem}\r\n                        onChange={e => setEditItem(e.target.value)} />\r\n                    }\r\n\r\n                    <div className=\"btns\">\r\n                      {/* complete */}\r\n                      <Button\r\n                        className=\"compBtn\"\r\n                        onClick={() => itemStatusChange(elem.id, \"complete\")}\r\n                        disabled={elem.isCompleted || elem.isEditing ? true : false}>Done</Button>\r\n\r\n                      {/* edit */}\r\n                      {!elem.isEditing ?\r\n                        <Button\r\n                          className=\"editBtn\"\r\n                          onClick={() => itemStatusChange(elem.id, \"edit\")}\r\n                          disabled={elem.isCompleted ? true : false}><AiFillEdit /></Button> :\r\n                        <Button\r\n                          className=\"saveBtn\"\r\n                          onClick={() => itemStatusChange(elem.id, \"save\")}><AiFillCheckSquare /></Button>}\r\n\r\n                      {/* delete */}\r\n                      <Button\r\n                        className=\"deleteBtn\"\r\n                        onClick={() => deleteToDoItem(elem.id)}><AiFillDelete /></Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n            </>}\r\n\r\n            {/* Tablet, Desktop, and Large Desktop view */}\r\n            {(isTablet || isDesktop || isLargeDesktop) && <>\r\n              <Row\r\n                key={toDoList.id}\r\n                className=\"taskCard tablet\" >\r\n                {toDoList.map(elem => (\r\n                  <Col\r\n                    data-id={elem.id}\r\n                    className={[\r\n                      \"col-md-5 col-lg-4 col-xl-3 task tabletTask\",\r\n                      elem.isCompleted && \"complete\"\r\n                    ].join(' ')}>\r\n\r\n                    {!elem.isEditing ?\r\n                      <p>{elem.item}</p> :\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        //wrap=\"soft\"\r\n                        className=\"editBox\"\r\n                        value={editItem}\r\n                        onChange={e => setEditItem(e.target.value)} />\r\n                    }\r\n\r\n                    <div className=\"btns\">\r\n                      {/* complete */}\r\n                      <Button\r\n                        className=\"compBtn\"\r\n                        onClick={() => itemStatusChange(elem.id, \"complete\")}\r\n                        disabled={elem.isCompleted || elem.isEditing ? true : false}>Done</Button>\r\n\r\n                      {/* edit */}\r\n                      {!elem.isEditing ?\r\n                        <Button\r\n                          className=\"editBtn\"\r\n                          onClick={() => itemStatusChange(elem.id, \"edit\")}\r\n                          disabled={elem.isCompleted ? true : false}><AiFillEdit /></Button> :\r\n                        <Button\r\n                          className=\"saveBtn\"\r\n                          onClick={() => itemStatusChange(elem.id, \"save\")}><AiFillCheckSquare /></Button>}\r\n\r\n                      {/* delete */}\r\n                      <Button\r\n                        className=\"deleteBtn\"\r\n                        onClick={() => deleteToDoItem(elem.id)}><AiFillDelete /></Button>\r\n                    </div>\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </>}\r\n          </>\r\n        ) : (<h2 className=\"msg\">No task left :) Good job!</h2>)}\r\n      </div>\r\n      {/* Alert Modal for editing */}\r\n      {alertModal &&\r\n        <Modal\r\n          className=\"alertModal\"\r\n          show={alertModal}\r\n          onHide={() => setAlertModal(false)}\r\n          aria-labelledby=\"example-modal-sizes-title-sm\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\" className=\"alert\">\r\n              Please enter your task\r\n            </Modal.Title>\r\n            <Button\r\n              className=\"clsBtn\"\r\n              onClick={() => setAlertModal(false)}>Close</Button>\r\n          </Modal.Header>\r\n        </Modal>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { FaLinkedin, FaGithub } from \"react-icons/fa\";\nimport FadeIn from 'react-fade-in';\nimport ToDoInput from './components/ToDoInput/ToDoInput';\nimport ToDoList from './components/ToDoList/ToDoList';\n\nconst App = () => {\n\n  return (\n    < >\n      <div className=\"appContainer\">\n        <header>\n          <h1>Redux To Do List</h1>\n        </header>\n\n        <div className=\"mainContainer\">\n          <FadeIn>\n            <ToDoInput />\n            <ToDoList />\n          </FadeIn>\n        </div>\n\n        <footer>\n          <p>@Yuki Matsubara all right reserved. 2021/07.\n            <a href=\"https://www.linkedin.com/in/yukimatsubara/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin></FaLinkedin></a>\n            <a href=\"https://github.com/YukiRamu\" target=\"_blank\" rel=\"noreferrer\"><FaGithub></FaGithub></a>\n          </p>\n        </footer>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport ToDoReducer from \"./ToDoSlice\";\nimport { save, load } from 'redux-localstorage-simple';\n\nexport const store = configureStore({\n  reducer: {\n    toDo: ToDoReducer\n  },\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport { MediaQueryProvider } from './contexts/MediaQueryContext';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MediaQueryProvider>\n        <App />\n      </MediaQueryProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}