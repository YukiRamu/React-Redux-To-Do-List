{"version":3,"sources":["redux/ToDoSlice.jsx","redux/FilterSlice.jsx","components/AlertModal/AlertModal.jsx","components/ToDoInput/ToDoInput.jsx","contexts/MediaQueryContext.jsx","components/ToDoFilter/ToDoFilter.jsx","components/ToDoList/ToDoList.jsx","App.jsx","redux/store.jsx","serviceWorker.js","index.js"],"names":["ToDoSlice","createSlice","name","initialState","load","states","hasOwnProperty","toDo","map","elem","item","isCompleted","isDeleted","isEditing","isVisible","id","reducers","addToDo","state","action","payload","deleteToDo","filter","statusChange","index","splice","filterToDo","actions","ToDoListSelector","FilterSlice","editMode","changeFilter","changeEditMode","FilterSelector","AlertContext","createContext","AlertModal","props","useState","show","msg","alertModal","setAlertModal","Provider","value","children","Modal","className","onHide","Header","Title","Button","onClick","ToDoInput","toDoList","useSelector","dispatch","useDispatch","setItem","useContext","Form","onSubmit","e","preventDefault","uuid","Group","Control","type","placeholder","onChange","target","variant","MediaQueryContext","isSmartPhone","isMobile","isTablet","isDesktop","isLargeDesktop","MediaQueryProvider","useMediaQuery","maxWidth","minWidth","ToDoFilter","filterItem","condition","Error","join","ToDoList","editItem","setEditItem","deleteToDoItem","delItem","changeItemStatus","status","targetItem","length","Row","Col","as","disabled","App","href","rel","store","configureStore","reducer","ToDoReducer","FilterReducer","middleware","getDefaultMiddleware","concat","save","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5330fc99.chunk.js","sourcesContent":["/* Slice.jsx handles all basic configuration on Redux */\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nconst initialization = () => {\r\n  //get to do data from localStorage\r\n  if (load({ states: [\"toDo\"] }).hasOwnProperty(\"toDo\")) {\r\n    return load({ states: [\"toDo\"] }).toDo.map(elem => (\r\n      {\r\n        item: elem.item,\r\n        isCompleted: elem.isCompleted,\r\n        isDeleted: elem.isDeleted,\r\n        isEditing: false,//always non-editing mode\r\n        isVisible: true, //always show all\r\n        id: elem.id\r\n      }\r\n    ));\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst ToDoSlice = createSlice({\r\n  name: \"toDo\",\r\n  initialState: initialization(),\r\n  reducers: {\r\n    addToDo: (state, action) => {\r\n      //update state\r\n      return [...state, action.payload];\r\n    },\r\n    deleteToDo: (state, action) => {\r\n      //delete from state\r\n      return state.filter(elem => elem.id != action.payload.id);\r\n    },\r\n    statusChange: (state, action) => {\r\n      //complete, edit, or save\r\n      //update state\r\n      state.map((elem, index) => elem.id == action.payload.id && state.splice(index, 1, action.payload));\r\n    },\r\n    filterToDo: (state, action) => {\r\n      return action.payload;\r\n    }\r\n  }\r\n});\r\n\r\n//export reducer, actions,and state(selector)\r\nexport default ToDoSlice.reducer;\r\nexport const { addToDo, deleteToDo, statusChange, filterToDo } = ToDoSlice.actions;\r\nexport const ToDoListSelector = state => state.toDo;","/* Slice.jsx handles filtering configuration on Redux */\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst FilterSlice = createSlice({\r\n  name: \"filter\",\r\n  initialState: { filter: \"all\", editMode: false }, //all, inProgress, or complete & boolean\r\n  reducers: {\r\n    //define action methods -- needs to return\r\n    changeFilter: (state, action) => {\r\n      return { ...state, filter: action.payload };\r\n    },\r\n    changeEditMode: (state, action) => {\r\n      return { ...state, editMode: action.payload };\r\n    }\r\n  }\r\n});\r\n\r\n//export reducer, actions,and state(selector)\r\nexport default FilterSlice.reducer;\r\nexport const { changeFilter, changeEditMode } = FilterSlice.actions;\r\nexport const FilterSelector = state => state.filter;","import React, { useState, createContext } from 'react';\r\nimport \"./AlertModal.css\";\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\n//create context\r\nconst AlertContext = createContext();\r\n\r\nconst AlertModal = (props) => {\r\n\r\n  const [alertModal, setAlertModal] = useState({ show: false, msg: \"\" });\r\n\r\n  return (\r\n    <>\r\n      <AlertContext.Provider value={{\r\n        setAlertModal\r\n      }}>\r\n        {props.children}\r\n      </AlertContext.Provider>\r\n\r\n      {alertModal.show &&\r\n        <Modal\r\n          className=\"alertModal\"\r\n          show={alertModal.show}\r\n          onHide={() => setAlertModal({ show: false, msg: \"\" })}\r\n          aria-labelledby=\"example-modal-sizes-title-sm\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\" className=\"alert\">\r\n              {alertModal.msg}\r\n            </Modal.Title>\r\n            <Button\r\n              className=\"clsBtn\"\r\n              onClick={() => setAlertModal({ show: false, msg: \"\" })}>Close</Button>\r\n          </Modal.Header>\r\n        </Modal>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport { AlertModal as default, AlertContext, };\r\n","import React, { useState, useContext } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addToDo, filterToDo, ToDoListSelector } from '../../redux/ToDoSlice';\r\nimport { FilterSelector, changeFilter } from '../../redux/FilterSlice';\r\nimport \"./ToDoInput.css\";\r\nimport uuid from 'react-uuid';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { FiAlertOctagon } from \"react-icons/fi\";\r\nimport { AlertContext } from '../AlertModal/AlertModal';\r\n\r\nconst ToDoInput = () => {\r\n\r\n  //Get state from ToDoSlice.jsx\r\n  const toDoList = useSelector(ToDoListSelector);\r\n  const filter = useSelector(FilterSelector);\r\n\r\n  //Use dispatch method from redux \r\n  const dispatch = useDispatch();\r\n\r\n  //Private state hook for the input\r\n  const [item, setItem] = useState(\"\");\r\n\r\n  //Alert\r\n  const { setAlertModal } = useContext(AlertContext);\r\n\r\n  //method\r\n  const addToDoItem = (e) => {\r\n    e.preventDefault();\r\n\r\n    //if it is an editing mode, show alert and return false;\r\n    if (filter.editMode) {\r\n      setAlertModal({ show: true, msg: \"Oops! You haven't save your task.\" });\r\n      return false;\r\n    } else {\r\n      //validation check\r\n      if (item === \"\") {\r\n        setAlertModal({ show: true, msg: \"Please enter your task!\" });\r\n      } else {\r\n        /* dispatch */\r\n        //#1 update visibility - filter back to \"show all\"\r\n        //prepare action methods\r\n        const showAllAction = () => {\r\n          return toDoList.map(elem => (\r\n            {\r\n              item: elem.item,\r\n              isCompleted: elem.isCompleted,\r\n              isDeleted: elem.isDeleted,\r\n              isEditing: elem.isEditing,\r\n              isVisible: true, //show all\r\n              id: elem.id\r\n            }\r\n          ));\r\n        };\r\n        dispatch(filterToDo(showAllAction()));\r\n\r\n        //#2 add to do\r\n        dispatch(addToDo({\r\n          item: item,\r\n          isCompleted: false,\r\n          isDeleted: false,\r\n          isEditing: false,\r\n          isVisible: true,\r\n          id: uuid()\r\n        }));\r\n\r\n        //#3 change filter to all\r\n        dispatch(changeFilter(\"all\"));\r\n\r\n        //clear input\r\n        setItem(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"inputFormContainer\">\r\n        <Form onSubmit={addToDoItem}>\r\n          <Form.Group>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter your task...\"\r\n              value={item}\r\n              onChange={e => setItem(e.target.value)} />\r\n          </Form.Group>\r\n          <Button variant=\"outline-info\" type=\"submit\" className=\"addBtn\">Add</Button>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoInput;\r\n","import React, { createContext } from 'react';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\n//create context with initial values - mobile first\r\nconst MediaQueryContext = createContext({\r\n  isSmartPhone: true,\r\n  isMobile: false,\r\n  isTablet: false,\r\n  isDesktop: false,\r\n  isLargeDesktop: false\r\n});\r\n\r\nconst MediaQueryProvider = (props) => {\r\n  const isSmartPhone = useMediaQuery({ maxWidth: 576 }); //default\r\n  const isMobile = useMediaQuery({ minWidth: 576, maxWidth: 767 }); //incl landscape phone sm\r\n  const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 991 }); //md\r\n  const isDesktop = useMediaQuery({ minWidth: 992, maxWidth: 1200 }); //lg\r\n  const isLargeDesktop = useMediaQuery({ minWidth: 1200 }); //xl\r\n\r\n  return (\r\n    <>\r\n      <MediaQueryContext.Provider value={{ isSmartPhone, isMobile, isTablet, isDesktop, isLargeDesktop }}>\r\n        {props.children}\r\n      </MediaQueryContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { MediaQueryContext as default, MediaQueryProvider };\r\n\r\n","import React, { useContext } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ToDoListSelector, filterToDo } from '../../redux/ToDoSlice';\r\nimport { FilterSelector, changeFilter } from '../../redux/FilterSlice';\r\nimport { Button } from 'react-bootstrap';\r\nimport \"./ToDoFilter.css\";\r\nimport { AlertContext } from '../AlertModal/AlertModal';\r\n\r\nconst ToDoFilter = () => {\r\n\r\n  //Get state from ToDoSlice.jsx\r\n  const toDoList = useSelector(ToDoListSelector);\r\n\r\n  //Get state from FilterSlice.jsx\r\n  const filter = useSelector(FilterSelector);\r\n\r\n  //Use dispatch method from redux\r\n  const dispatch = useDispatch();\r\n\r\n  //Alert\r\n  const { setAlertModal } = useContext(AlertContext);\r\n\r\n  //method\r\n  const filterItem = (condition) => {\r\n    //if it is an editing mode, show alert and return false;\r\n    if (filter.editMode) {\r\n      setAlertModal({ show: true, msg: \"Oops! You haven't save your task.\" });\r\n      return false;\r\n    } else {\r\n      //prepare action methods\r\n      const showAllAction = () => {\r\n        return toDoList.map(elem => (\r\n          {\r\n            item: elem.item,\r\n            isCompleted: elem.isCompleted,\r\n            isDeleted: elem.isDeleted,\r\n            isEditing: elem.isEditing,\r\n            isVisible: true, //show all\r\n            id: elem.id\r\n          }\r\n        ));\r\n      };\r\n\r\n      const showInProgressAction = () => {\r\n        return toDoList.map(\r\n          elem => !elem.isCompleted ?\r\n            {\r\n              item: elem.item,\r\n              isCompleted: elem.isCompleted,\r\n              isDeleted: elem.isDeleted,\r\n              isEditing: elem.isEditing,\r\n              isVisible: true, //show in progress items\r\n              id: elem.id\r\n            } :\r\n            {\r\n              item: elem.item,\r\n              isCompleted: elem.isCompleted,\r\n              isDeleted: elem.isDeleted,\r\n              isEditing: elem.isEditing,\r\n              isVisible: false, //hide complete items\r\n              id: elem.id\r\n            });\r\n      };\r\n\r\n      const showCompleteAction = () => {\r\n        return toDoList.map(\r\n          elem => elem.isCompleted ?\r\n            {\r\n              item: elem.item,\r\n              isCompleted: elem.isCompleted,\r\n              isDeleted: elem.isDeleted,\r\n              isEditing: elem.isEditing,\r\n              isVisible: true, //show complete items\r\n              id: elem.id\r\n            } :\r\n            {\r\n              item: elem.item,\r\n              isCompleted: elem.isCompleted,\r\n              isDeleted: elem.isDeleted,\r\n              isEditing: elem.isEditing,\r\n              isVisible: false, //hide inProgress items\r\n              id: elem.id\r\n            });\r\n      };\r\n\r\n      //dispatch payload based on filter condition\r\n      switch (condition) {\r\n        case \"all\":\r\n          dispatch(filterToDo(showAllAction()));\r\n          dispatch(changeFilter(\"all\"));\r\n          break;\r\n        case \"inProgress\":\r\n          dispatch(filterToDo(showInProgressAction()));\r\n          dispatch(changeFilter(\"inProgress\"));\r\n          break;\r\n        case \"complete\":\r\n          dispatch(filterToDo(showCompleteAction()));\r\n          dispatch(changeFilter(\"complete\"));\r\n          break;\r\n        default:\r\n          throw Error(\"Invalid condition\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter\">\r\n        <Button\r\n          className={[\r\n            \"showAll\",\r\n            filter.filter === \"all\" && \"selected\"\r\n          ].join(' ')}\r\n          onClick={() => filterItem(\"all\")}> All</Button>\r\n        <Button\r\n          className={[\r\n            \"InprogressFilter\",\r\n            filter.filter === \"inProgress\" && \"selected\"\r\n          ].join(' ')}\r\n          onClick={() => filterItem(\"inProgress\")}>In Progress</Button>\r\n        <Button\r\n          className={[\r\n            \"compFilter\",\r\n            filter.filter === \"complete\" && \"selected\"\r\n          ].join(' ')}\r\n          onClick={() => filterItem(\"complete\")}> Complete</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoFilter;\r\n","import React, { useContext, useState } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ToDoListSelector, deleteToDo, statusChange } from '../../redux/ToDoSlice';\r\nimport { FilterSelector, changeEditMode } from '../../redux/FilterSlice';\r\nimport \"./ToDoList.css\";\r\nimport { Form, Row, Button, Col } from 'react-bootstrap';\r\nimport { AiFillEdit, AiFillDelete, AiFillCheckSquare } from \"react-icons/ai\";\r\nimport MediaQueryContext from '../../contexts/MediaQueryContext';\r\nimport ToDoFilter from '../ToDoFilter/ToDoFilter';\r\nimport { AlertContext } from '../AlertModal/AlertModal';\r\n\r\nconst ToDoList = () => {\r\n\r\n  //Responsive design\r\n  const { isSmartPhone, isMobile, isTablet, isDesktop, isLargeDesktop } = useContext(MediaQueryContext);\r\n\r\n  //Alert\r\n  const { setAlertModal } = useContext(AlertContext);\r\n\r\n  //Get state from ToDoSlice.jsx\r\n  const toDoList = useSelector(ToDoListSelector);\r\n  const filter = useSelector(FilterSelector);\r\n\r\n  //Use dispatch method from redux\r\n  const dispatch = useDispatch();\r\n\r\n  //Private state hook\r\n  const [editItem, setEditItem] = useState(\"\");\r\n  // const [alertModal, setAlertModal] = useState(false);\r\n\r\n  //methods\r\n  /* delete */\r\n  const deleteToDoItem = (id) => {\r\n    //find which item is completed  -----> will be refactored. just pass id or index. isDeleted  not needed\r\n    let delItem = toDoList.filter(elem => elem.id === id);\r\n\r\n    //change isDeleted flag and dispatch\r\n    dispatch(deleteToDo({\r\n      item: delItem[0].item,\r\n      isCompleted: delItem[0].isCompleted,\r\n      isDeleted: true, //change\r\n      isEditing: delItem[0].isEditing,\r\n      isVisible: true,\r\n      id: delItem[0].id,\r\n    }));\r\n  };\r\n\r\n  /* status change - complete, edit, or save*/\r\n  const changeItemStatus = (id, status) => {\r\n\r\n    //find which item is on target\r\n    let targetItem = toDoList.filter(elem => elem.id === id);\r\n\r\n    //prepare payload object\r\n    const payload = {\r\n      item: targetItem[0].item,\r\n      isCompleted: false, //status flag\r\n      isDeleted: false, //status flag\r\n      isEditing: false, //status flag\r\n      isVisible: true, //filter flag, default \"all\"\r\n      id: targetItem[0].id,\r\n    };\r\n\r\n    //prepare action methods\r\n    const completeAction = () => {\r\n      payload.isCompleted = true;\r\n      return payload;\r\n    };\r\n\r\n    const editAction = () => {\r\n      setEditItem(targetItem[0].item); //to show the current task in the input field\r\n      payload.isEditing = true;\r\n      return payload;\r\n    };\r\n\r\n    const saveAction = () => {\r\n      //input validation check\r\n      editItem === \"\" ?\r\n        setAlertModal({ show: true, msg: \"Please enter your task!\" })\r\n        : payload.item = editItem; payload.isEditing = false; return payload;\r\n    };\r\n\r\n    //dispatch payload based on status\r\n    switch (status) {\r\n      case \"complete\":\r\n        dispatch(statusChange(completeAction()));\r\n        break;\r\n      case \"edit\":\r\n        dispatch(statusChange(editAction()));\r\n        dispatch(changeEditMode(true));\r\n        break;\r\n      case \"save\":\r\n        dispatch(statusChange(saveAction()));\r\n        dispatch(changeEditMode(false));\r\n        break;\r\n      default:\r\n        throw Error(\"Invalid status\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toDosContainer\">\r\n        {!toDoList.length == 0 ? (\r\n          <>\r\n            {/* Filter */}\r\n            <ToDoFilter />\r\n\r\n            {/* To do list */}\r\n            {/* Smartphone and Landscape view */}\r\n            {(isSmartPhone || isMobile) && <>\r\n              {toDoList.map(elem => (\r\n                //show only \"isVisible is true\" items\r\n                elem.isVisible === true &&\r\n                <Row\r\n                  key={elem.id}\r\n                  className=\"taskCard\" >\r\n                  <Col\r\n                    data-id={elem.id}\r\n                    className={[\r\n                      \"task\",\r\n                      elem.isCompleted && \"complete\",\r\n                      elem.isEditing && \"editing\"\r\n                    ].join(' ')}>\r\n\r\n                    {!elem.isEditing ?\r\n                      <p>{elem.item}</p> :\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        className=\"editBox\"\r\n                        value={editItem}\r\n                        onChange={e => setEditItem(e.target.value)} />\r\n                    }\r\n\r\n                    <div className=\"btns\">\r\n                      {/* complete */}\r\n                      <Button\r\n                        className=\"compBtn\"\r\n                        onClick={() => changeItemStatus(elem.id, \"complete\")}\r\n                        disabled={elem.isCompleted || elem.isEditing ? true : false}>Done</Button>\r\n\r\n                      {/* edit: hide when one item is being edited */}\r\n                      {!filter.editMode && <Button\r\n                        className=\"editBtn\"\r\n                        onClick={() => changeItemStatus(elem.id, \"edit\")}\r\n                        disabled={elem.isCompleted || filter.editMode ? true : false}><AiFillEdit /></Button>}\r\n\r\n                      {/* save : show only on the item being edited */}\r\n                      {filter.editMode && elem.isEditing && <Button\r\n                        className=\"saveBtn\"\r\n                        onClick={() => changeItemStatus(elem.id, \"save\")}><AiFillCheckSquare /></Button>}\r\n\r\n                      {/* delete */}\r\n                      <Button\r\n                        className=\"deleteBtn\"\r\n                        disabled={elem.isEditing ? true : false}\r\n                        onClick={() => deleteToDoItem(elem.id)}><AiFillDelete /></Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n            </>}\r\n\r\n            {/* Tablet, Desktop, and Large Desktop view */}\r\n            {(isTablet || isDesktop || isLargeDesktop) && <>\r\n              <Row\r\n                key={toDoList.id}\r\n                className=\"taskCard tablet\" >\r\n                {toDoList.map(elem => (\r\n                  //show only \"isVisible is true\" items\r\n                  elem.isVisible === true &&\r\n                  <Col\r\n                    data-id={elem.id}\r\n                    className={[\r\n                      \"col-md-5 col-lg-4 col-xl-3 task tabletTask\",\r\n                      elem.isCompleted && \"complete\",\r\n                      elem.isEditing && \"editing\"\r\n                    ].join(' ')}>\r\n\r\n                    {!elem.isEditing ?\r\n                      <p>{elem.item}</p> :\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        className=\"editBox\"\r\n                        value={editItem}\r\n                        onChange={e => setEditItem(e.target.value)} />\r\n                    }\r\n\r\n                    <div className=\"btns\">\r\n                      {/* complete */}\r\n                      <Button\r\n                        className=\"compBtn\"\r\n                        onClick={() => changeItemStatus(elem.id, \"complete\")}\r\n                        disabled={elem.isCompleted || elem.isEditing ? true : false}>Done</Button>\r\n\r\n                      {/* edit: hide when one item is being edited */}\r\n                      {!filter.editMode && <Button\r\n                        className=\"editBtn\"\r\n                        onClick={() => changeItemStatus(elem.id, \"edit\")}\r\n                        disabled={elem.isCompleted || filter.editMode ? true : false}><AiFillEdit /></Button>}\r\n\r\n                      {/* save : show only on the item being edited */}\r\n                      {filter.editMode && elem.isEditing && <Button\r\n                        className=\"saveBtn\"\r\n                        onClick={() => changeItemStatus(elem.id, \"save\")}><AiFillCheckSquare /></Button>}\r\n\r\n                      {/* delete */}\r\n                      <Button\r\n                        className=\"deleteBtn\"\r\n                        disabled={elem.isEditing ? true : false}\r\n                        onClick={() => deleteToDoItem(elem.id)}><AiFillDelete /></Button>\r\n                    </div>\r\n                  </Col>\r\n                ))}\r\n              </Row>\r\n            </>}\r\n          </>\r\n        ) : (<h2 className=\"msg\">No task left :) Good job!</h2>)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { FaLinkedin, FaGithub } from \"react-icons/fa\";\nimport FadeIn from 'react-fade-in';\nimport ToDoInput from './components/ToDoInput/ToDoInput';\nimport ToDoList from './components/ToDoList/ToDoList';\n\nconst App = () => {\n\n  return (\n    < >\n      <div className=\"appContainer\">\n        <header>\n          <h1>Redux To Do List</h1>\n        </header>\n\n        <div className=\"mainContainer\">\n          <FadeIn>\n            <ToDoInput />\n            <ToDoList />\n          </FadeIn>\n        </div>\n\n        <footer>\n          <p>@Yuki Matsubara all right reserved. 2021/07.\n            <a href=\"https://www.linkedin.com/in/yukimatsubara/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin></FaLinkedin></a>\n            <a href=\"https://github.com/YukiRamu\" target=\"_blank\" rel=\"noreferrer\"><FaGithub></FaGithub></a>\n          </p>\n        </footer>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport ToDoReducer from \"./ToDoSlice\";\nimport FilterReducer from \"./FilterSlice\";\nimport { save } from 'redux-localstorage-simple';\n\nexport const store = configureStore({\n  reducer: {\n    toDo: ToDoReducer, //naming convention xxxReducer\n    filter: FilterReducer\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(save({ states: [\"toDo\"] })), //save\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport { MediaQueryProvider } from './contexts/MediaQueryContext';\nimport * as serviceWorker from './serviceWorker';\nimport AlertModal from \"./components/AlertModal/AlertModal\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MediaQueryProvider>\n        <AlertModal>\n          <App />\n        </AlertModal>\n      </MediaQueryProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}